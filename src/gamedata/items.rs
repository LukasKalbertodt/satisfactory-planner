// This file is generated by 'data/gen.ts'!
//
// The data in this file is not licensed under the same license as the rest of the
// project. It is derived from the Satisfactory Wiki, which in turn took it from the
// game. See the main README for more information.


#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, serde::Deserialize, serde::Serialize)]
#[repr(u8)]
pub enum ItemKind {
    #[serde(rename = "uranium-waste")]
    UraniumWaste = 0,
    #[serde(rename = "plutonium-waste")]
    PlutoniumWaste = 1,
    #[serde(rename = "concrete")]
    Concrete = 2,
    #[serde(rename = "silica")]
    Silica = 3,
    #[serde(rename = "iron-plate")]
    IronPlate = 4,
    #[serde(rename = "steel-beam")]
    SteelBeam = 5,
    #[serde(rename = "aluminum-ingot")]
    AluminumIngot = 6,
    #[serde(rename = "battery")]
    Battery = 7,
    #[serde(rename = "packaged-fuel")]
    PackagedFuel = 8,
    #[serde(rename = "packaged-ionized-fuel")]
    PackagedIonizedFuel = 9,
    #[serde(rename = "packaged-rocket-fuel")]
    PackagedRocketFuel = 10,
    #[serde(rename = "packaged-turbofuel")]
    PackagedTurbofuel = 11,
    #[serde(rename = "iodine-infused-filter")]
    IodineInfusedFilter = 12,
    #[serde(rename = "compacted-coal")]
    CompactedCoal = 13,
    #[serde(rename = "packaged-heavy-oil-residue")]
    PackagedHeavyOilResidue = 14,
    #[serde(rename = "petroleum-coke")]
    PetroleumCoke = 15,
    #[serde(rename = "packaged-oil")]
    PackagedOil = 16,
    #[serde(rename = "iron-rod")]
    IronRod = 17,
    #[serde(rename = "wire")]
    Wire = 18,
    #[serde(rename = "cable")]
    Cable = 19,
    #[serde(rename = "iron-ingot")]
    IronIngot = 20,
    #[serde(rename = "reinforced-iron-plate")]
    ReinforcedIronPlate = 21,
    #[serde(rename = "rotor")]
    Rotor = 22,
    #[serde(rename = "fuel")]
    Fuel = 23,
    #[serde(rename = "rocket-fuel")]
    RocketFuel = 24,
    #[serde(rename = "copper-sheet")]
    CopperSheet = 25,
    #[serde(rename = "modular-frame")]
    ModularFrame = 26,
    #[serde(rename = "screw")]
    Screw = 27,
    #[serde(rename = "nitric-acid")]
    NitricAcid = 28,
    #[serde(rename = "turbofuel")]
    Turbofuel = 29,
    #[serde(rename = "empty-fluid-tank")]
    EmptyFluidTank = 30,
    #[serde(rename = "crystal-oscillator")]
    CrystalOscillator = 31,
    #[serde(rename = "motor")]
    Motor = 32,
    #[serde(rename = "dark-matter-crystal")]
    DarkMatterCrystal = 33,
    #[serde(rename = "ionized-fuel")]
    IonizedFuel = 34,
    #[serde(rename = "supercomputer")]
    Supercomputer = 35,
    #[serde(rename = "cooling-system")]
    CoolingSystem = 36,
    #[serde(rename = "ficsite-trigon")]
    FicsiteTrigon = 37,
    #[serde(rename = "turbo-motor")]
    TurboMotor = 38,
    #[serde(rename = "time-crystal")]
    TimeCrystal = 39,
    #[serde(rename = "dark-matter-residue")]
    DarkMatterResidue = 40,
    #[serde(rename = "reanimated-sam")]
    ReanimatedSam = 41,
    #[serde(rename = "excited-photonic-matter")]
    ExcitedPhotonicMatter = 42,
    #[serde(rename = "diamonds")]
    Diamonds = 43,
    #[serde(rename = "alclad-aluminum-sheet")]
    AlcladAluminumSheet = 44,
    #[serde(rename = "superposition-oscillator")]
    SuperpositionOscillator = 45,
    #[serde(rename = "neural-quantum-processor")]
    NeuralQuantumProcessor = 46,
    #[serde(rename = "ai-expansion-server")]
    AiExpansionServer = 47,
    #[serde(rename = "magnetic-field-generator")]
    MagneticFieldGenerator = 48,
    #[serde(rename = "sam-fluctuator")]
    SamFluctuator = 49,
    #[serde(rename = "steel-pipe")]
    SteelPipe = 50,
    #[serde(rename = "fused-modular-frame")]
    FusedModularFrame = 51,
    #[serde(rename = "radio-control-unit")]
    RadioControlUnit = 52,
    #[serde(rename = "ficsite-ingot")]
    FicsiteIngot = 53,
    #[serde(rename = "biochemical-sculptor")]
    BiochemicalSculptor = 54,
    #[serde(rename = "assembly-director-system")]
    AssemblyDirectorSystem = 55,
    #[serde(rename = "caterium-ingot")]
    CateriumIngot = 56,
    #[serde(rename = "empty-canister")]
    EmptyCanister = 57,
    #[serde(rename = "circuit-board")]
    CircuitBoard = 58,
    #[serde(rename = "plastic")]
    Plastic = 59,
    #[serde(rename = "encased-industrial-beam")]
    EncasedIndustrialBeam = 60,
    #[serde(rename = "rubber")]
    Rubber = 61,
    #[serde(rename = "polymer-resin")]
    PolymerResin = 62,
    #[serde(rename = "heavy-oil-residue")]
    HeavyOilResidue = 63,
    #[serde(rename = "quartz-crystal")]
    QuartzCrystal = 64,
    #[serde(rename = "steel-ingot")]
    SteelIngot = 65,
    #[serde(rename = "versatile-framework")]
    VersatileFramework = 66,
    #[serde(rename = "packaged-water")]
    PackagedWater = 67,
    #[serde(rename = "copper-ingot")]
    CopperIngot = 68,
    #[serde(rename = "aluminum-scrap")]
    AluminumScrap = 69,
    #[serde(rename = "aluminum-casing")]
    AluminumCasing = 70,
    #[serde(rename = "alumina-solution")]
    AluminaSolution = 71,
    #[serde(rename = "computer")]
    Computer = 72,
    #[serde(rename = "heavy-modular-frame")]
    HeavyModularFrame = 73,
    #[serde(rename = "smart-plating")]
    SmartPlating = 74,
    #[serde(rename = "high-speed-connector")]
    HighSpeedConnector = 75,
    #[serde(rename = "automated-wiring")]
    AutomatedWiring = 76,
    #[serde(rename = "stator")]
    Stator = 77,
    #[serde(rename = "ai-limiter")]
    AiLimiter = 78,
    #[serde(rename = "quickwire")]
    Quickwire = 79,
    #[serde(rename = "modular-engine")]
    ModularEngine = 80,
    #[serde(rename = "adaptive-control-unit")]
    AdaptiveControlUnit = 81,
    #[serde(rename = "pressure-conversion-cube")]
    PressureConversionCube = 82,
    #[serde(rename = "encased-plutonium-cell")]
    EncasedPlutoniumCell = 83,
    #[serde(rename = "plutonium-pellet")]
    PlutoniumPellet = 84,
    #[serde(rename = "non-fissile-uranium")]
    NonFissileUranium = 85,
    #[serde(rename = "sulfuric-acid")]
    SulfuricAcid = 86,
    #[serde(rename = "copper-powder")]
    CopperPowder = 87,
    #[serde(rename = "heat-sink")]
    HeatSink = 88,
    #[serde(rename = "electromagnetic-control-rod")]
    ElectromagneticControlRod = 89,
    #[serde(rename = "nuclear-pasta")]
    NuclearPasta = 90,
    #[serde(rename = "encased-uranium-cell")]
    EncasedUraniumCell = 91,
    #[serde(rename = "dissolved-silica")]
    DissolvedSilica = 92,
    #[serde(rename = "thermal-propulsion-rocket")]
    ThermalPropulsionRocket = 93,
    #[serde(rename = "black-powder")]
    BlackPowder = 94,
    #[serde(rename = "ficsonium")]
    Ficsonium = 95,
    #[serde(rename = "singularity-cell")]
    SingularityCell = 96,
    #[serde(rename = "ballistic-warp-drive")]
    BallisticWarpDrive = 97,
    #[serde(rename = "gas-filter")]
    GasFilter = 98,
    #[serde(rename = "alien-protein")]
    AlienProtein = 99,
    #[serde(rename = "blue-power-slug")]
    BluePowerSlug = 100,
    #[serde(rename = "alien-dna-capsule")]
    AlienDnaCapsule = 101,
    #[serde(rename = "purple-power-slug")]
    PurplePowerSlug = 102,
    #[serde(rename = "yellow-power-slug")]
    YellowPowerSlug = 103,
    #[serde(rename = "smokeless-powder")]
    SmokelessPowder = 104,
    #[serde(rename = "uranium-fuel-rod")]
    UraniumFuelRod = 105,
    #[serde(rename = "plutonium-fuel-rod")]
    PlutoniumFuelRod = 106,
    #[serde(rename = "ficsonium-fuel-rod")]
    FicsoniumFuelRod = 107,
    #[serde(rename = "explosive-rebar")]
    ExplosiveRebar = 108,
    #[serde(rename = "stun-rebar")]
    StunRebar = 109,
    #[serde(rename = "homing-rifle-ammo")]
    HomingRifleAmmo = 110,
    #[serde(rename = "cluster-nobelisk")]
    ClusterNobelisk = 111,
    #[serde(rename = "nobelisk")]
    Nobelisk = 112,
    #[serde(rename = "gas-nobelisk")]
    GasNobelisk = 113,
    #[serde(rename = "nuke-nobelisk")]
    NukeNobelisk = 114,
    #[serde(rename = "pulse-nobelisk")]
    PulseNobelisk = 115,
    #[serde(rename = "iron-rebar")]
    IronRebar = 116,
    #[serde(rename = "portable-miner")]
    PortableMiner = 117,
    #[serde(rename = "shatter-rebar")]
    ShatterRebar = 118,
    #[serde(rename = "turbo-rifle-ammo")]
    TurboRifleAmmo = 119,
    #[serde(rename = "rifle-ammo")]
    RifleAmmo = 120,
    #[serde(rename = "iron-ore")]
    IronOre = 121,
    #[serde(rename = "coal")]
    Coal = 122,
    #[serde(rename = "water")]
    Water = 123,
    #[serde(rename = "nitrogen-gas")]
    NitrogenGas = 124,
    #[serde(rename = "sulfur")]
    Sulfur = 125,
    #[serde(rename = "sam")]
    Sam = 126,
    #[serde(rename = "bauxite")]
    Bauxite = 127,
    #[serde(rename = "caterium-ore")]
    CateriumOre = 128,
    #[serde(rename = "copper-ore")]
    CopperOre = 129,
    #[serde(rename = "raw-quartz")]
    RawQuartz = 130,
    #[serde(rename = "limestone")]
    Limestone = 131,
    #[serde(rename = "uranium")]
    Uranium = 132,
    #[serde(rename = "crude-oil")]
    CrudeOil = 133,
    #[serde(rename = "solid-biofuel")]
    SolidBiofuel = 134,
    #[serde(rename = "packaged-liquid-biofuel")]
    PackagedLiquidBiofuel = 135,
    #[serde(rename = "biomass")]
    Biomass = 136,
    #[serde(rename = "leaves")]
    Leaves = 137,
    #[serde(rename = "mycelia")]
    Mycelia = 138,
    #[serde(rename = "wood")]
    Wood = 139,
    #[serde(rename = "liquid-biofuel")]
    LiquidBiofuel = 140,
    #[serde(rename = "packaged-alumina-solution")]
    PackagedAluminaSolution = 141,
    #[serde(rename = "packaged-nitrogen-gas")]
    PackagedNitrogenGas = 142,
    #[serde(rename = "packaged-nitric-acid")]
    PackagedNitricAcid = 143,
    #[serde(rename = "packaged-sulfuric-acid")]
    PackagedSulfuricAcid = 144,
    #[serde(rename = "fabric")]
    Fabric = 145,
    #[serde(rename = "hog-remains")]
    HogRemains = 146,
    #[serde(rename = "spitter-remains")]
    SpitterRemains = 147,
    #[serde(rename = "stinger-remains")]
    StingerRemains = 148,
    #[serde(rename = "hatcher-remains")]
    HatcherRemains = 149,
    #[serde(rename = "power-shard")]
    PowerShard = 150,
    #[serde(rename = "alien-power-matrix")]
    AlienPowerMatrix = 151,
}

impl TryFrom<u8> for ItemKind {
    type Error = ();
    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::UraniumWaste),
            1 => Ok(Self::PlutoniumWaste),
            2 => Ok(Self::Concrete),
            3 => Ok(Self::Silica),
            4 => Ok(Self::IronPlate),
            5 => Ok(Self::SteelBeam),
            6 => Ok(Self::AluminumIngot),
            7 => Ok(Self::Battery),
            8 => Ok(Self::PackagedFuel),
            9 => Ok(Self::PackagedIonizedFuel),
            10 => Ok(Self::PackagedRocketFuel),
            11 => Ok(Self::PackagedTurbofuel),
            12 => Ok(Self::IodineInfusedFilter),
            13 => Ok(Self::CompactedCoal),
            14 => Ok(Self::PackagedHeavyOilResidue),
            15 => Ok(Self::PetroleumCoke),
            16 => Ok(Self::PackagedOil),
            17 => Ok(Self::IronRod),
            18 => Ok(Self::Wire),
            19 => Ok(Self::Cable),
            20 => Ok(Self::IronIngot),
            21 => Ok(Self::ReinforcedIronPlate),
            22 => Ok(Self::Rotor),
            23 => Ok(Self::Fuel),
            24 => Ok(Self::RocketFuel),
            25 => Ok(Self::CopperSheet),
            26 => Ok(Self::ModularFrame),
            27 => Ok(Self::Screw),
            28 => Ok(Self::NitricAcid),
            29 => Ok(Self::Turbofuel),
            30 => Ok(Self::EmptyFluidTank),
            31 => Ok(Self::CrystalOscillator),
            32 => Ok(Self::Motor),
            33 => Ok(Self::DarkMatterCrystal),
            34 => Ok(Self::IonizedFuel),
            35 => Ok(Self::Supercomputer),
            36 => Ok(Self::CoolingSystem),
            37 => Ok(Self::FicsiteTrigon),
            38 => Ok(Self::TurboMotor),
            39 => Ok(Self::TimeCrystal),
            40 => Ok(Self::DarkMatterResidue),
            41 => Ok(Self::ReanimatedSam),
            42 => Ok(Self::ExcitedPhotonicMatter),
            43 => Ok(Self::Diamonds),
            44 => Ok(Self::AlcladAluminumSheet),
            45 => Ok(Self::SuperpositionOscillator),
            46 => Ok(Self::NeuralQuantumProcessor),
            47 => Ok(Self::AiExpansionServer),
            48 => Ok(Self::MagneticFieldGenerator),
            49 => Ok(Self::SamFluctuator),
            50 => Ok(Self::SteelPipe),
            51 => Ok(Self::FusedModularFrame),
            52 => Ok(Self::RadioControlUnit),
            53 => Ok(Self::FicsiteIngot),
            54 => Ok(Self::BiochemicalSculptor),
            55 => Ok(Self::AssemblyDirectorSystem),
            56 => Ok(Self::CateriumIngot),
            57 => Ok(Self::EmptyCanister),
            58 => Ok(Self::CircuitBoard),
            59 => Ok(Self::Plastic),
            60 => Ok(Self::EncasedIndustrialBeam),
            61 => Ok(Self::Rubber),
            62 => Ok(Self::PolymerResin),
            63 => Ok(Self::HeavyOilResidue),
            64 => Ok(Self::QuartzCrystal),
            65 => Ok(Self::SteelIngot),
            66 => Ok(Self::VersatileFramework),
            67 => Ok(Self::PackagedWater),
            68 => Ok(Self::CopperIngot),
            69 => Ok(Self::AluminumScrap),
            70 => Ok(Self::AluminumCasing),
            71 => Ok(Self::AluminaSolution),
            72 => Ok(Self::Computer),
            73 => Ok(Self::HeavyModularFrame),
            74 => Ok(Self::SmartPlating),
            75 => Ok(Self::HighSpeedConnector),
            76 => Ok(Self::AutomatedWiring),
            77 => Ok(Self::Stator),
            78 => Ok(Self::AiLimiter),
            79 => Ok(Self::Quickwire),
            80 => Ok(Self::ModularEngine),
            81 => Ok(Self::AdaptiveControlUnit),
            82 => Ok(Self::PressureConversionCube),
            83 => Ok(Self::EncasedPlutoniumCell),
            84 => Ok(Self::PlutoniumPellet),
            85 => Ok(Self::NonFissileUranium),
            86 => Ok(Self::SulfuricAcid),
            87 => Ok(Self::CopperPowder),
            88 => Ok(Self::HeatSink),
            89 => Ok(Self::ElectromagneticControlRod),
            90 => Ok(Self::NuclearPasta),
            91 => Ok(Self::EncasedUraniumCell),
            92 => Ok(Self::DissolvedSilica),
            93 => Ok(Self::ThermalPropulsionRocket),
            94 => Ok(Self::BlackPowder),
            95 => Ok(Self::Ficsonium),
            96 => Ok(Self::SingularityCell),
            97 => Ok(Self::BallisticWarpDrive),
            98 => Ok(Self::GasFilter),
            99 => Ok(Self::AlienProtein),
            100 => Ok(Self::BluePowerSlug),
            101 => Ok(Self::AlienDnaCapsule),
            102 => Ok(Self::PurplePowerSlug),
            103 => Ok(Self::YellowPowerSlug),
            104 => Ok(Self::SmokelessPowder),
            105 => Ok(Self::UraniumFuelRod),
            106 => Ok(Self::PlutoniumFuelRod),
            107 => Ok(Self::FicsoniumFuelRod),
            108 => Ok(Self::ExplosiveRebar),
            109 => Ok(Self::StunRebar),
            110 => Ok(Self::HomingRifleAmmo),
            111 => Ok(Self::ClusterNobelisk),
            112 => Ok(Self::Nobelisk),
            113 => Ok(Self::GasNobelisk),
            114 => Ok(Self::NukeNobelisk),
            115 => Ok(Self::PulseNobelisk),
            116 => Ok(Self::IronRebar),
            117 => Ok(Self::PortableMiner),
            118 => Ok(Self::ShatterRebar),
            119 => Ok(Self::TurboRifleAmmo),
            120 => Ok(Self::RifleAmmo),
            121 => Ok(Self::IronOre),
            122 => Ok(Self::Coal),
            123 => Ok(Self::Water),
            124 => Ok(Self::NitrogenGas),
            125 => Ok(Self::Sulfur),
            126 => Ok(Self::Sam),
            127 => Ok(Self::Bauxite),
            128 => Ok(Self::CateriumOre),
            129 => Ok(Self::CopperOre),
            130 => Ok(Self::RawQuartz),
            131 => Ok(Self::Limestone),
            132 => Ok(Self::Uranium),
            133 => Ok(Self::CrudeOil),
            134 => Ok(Self::SolidBiofuel),
            135 => Ok(Self::PackagedLiquidBiofuel),
            136 => Ok(Self::Biomass),
            137 => Ok(Self::Leaves),
            138 => Ok(Self::Mycelia),
            139 => Ok(Self::Wood),
            140 => Ok(Self::LiquidBiofuel),
            141 => Ok(Self::PackagedAluminaSolution),
            142 => Ok(Self::PackagedNitrogenGas),
            143 => Ok(Self::PackagedNitricAcid),
            144 => Ok(Self::PackagedSulfuricAcid),
            145 => Ok(Self::Fabric),
            146 => Ok(Self::HogRemains),
            147 => Ok(Self::SpitterRemains),
            148 => Ok(Self::StingerRemains),
            149 => Ok(Self::HatcherRemains),
            150 => Ok(Self::PowerShard),
            151 => Ok(Self::AlienPowerMatrix),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, serde::Deserialize, serde::Serialize)]
#[repr(u8)]
pub enum SourceItemKind {
    #[serde(rename = "iron-ore")]
    IronOre = 0,
    #[serde(rename = "copper-ore")]
    CopperOre = 1,
    #[serde(rename = "limestone")]
    Limestone = 2,
    #[serde(rename = "coal")]
    Coal = 3,
    #[serde(rename = "water")]
    Water = 4,
    #[serde(rename = "raw-quartz")]
    RawQuartz = 5,
    #[serde(rename = "sulfur")]
    Sulfur = 6,
    #[serde(rename = "crude-oil")]
    CrudeOil = 7,
    #[serde(rename = "caterium-ore")]
    CateriumOre = 8,
    #[serde(rename = "bauxite")]
    Bauxite = 9,
    #[serde(rename = "uranium")]
    Uranium = 10,
    #[serde(rename = "sam")]
    Sam = 11,
}

impl TryFrom<u8> for SourceItemKind {
    type Error = ();
    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::IronOre),
            1 => Ok(Self::CopperOre),
            2 => Ok(Self::Limestone),
            3 => Ok(Self::Coal),
            4 => Ok(Self::Water),
            5 => Ok(Self::RawQuartz),
            6 => Ok(Self::Sulfur),
            7 => Ok(Self::CrudeOil),
            8 => Ok(Self::CateriumOre),
            9 => Ok(Self::Bauxite),
            10 => Ok(Self::Uranium),
            11 => Ok(Self::Sam),
            _ => Err(()),
        }
    }
}

impl TryFrom<ItemKind> for SourceItemKind {
    type Error = ();
    fn try_from(value: ItemKind) -> Result<Self, Self::Error> {
        match value {
            ItemKind::IronOre => Ok(Self::IronOre),
            ItemKind::CopperOre => Ok(Self::CopperOre),
            ItemKind::Limestone => Ok(Self::Limestone),
            ItemKind::Coal => Ok(Self::Coal),
            ItemKind::Water => Ok(Self::Water),
            ItemKind::RawQuartz => Ok(Self::RawQuartz),
            ItemKind::Sulfur => Ok(Self::Sulfur),
            ItemKind::CrudeOil => Ok(Self::CrudeOil),
            ItemKind::CateriumOre => Ok(Self::CateriumOre),
            ItemKind::Bauxite => Ok(Self::Bauxite),
            ItemKind::Uranium => Ok(Self::Uranium),
            ItemKind::Sam => Ok(Self::Sam),
            _ => Err(()),
        }
    }
}

impl From<SourceItemKind> for ItemKind {
    fn from(value: SourceItemKind) -> Self {
        match value {
            SourceItemKind::IronOre => Self::IronOre,
            SourceItemKind::CopperOre => Self::CopperOre,
            SourceItemKind::Limestone => Self::Limestone,
            SourceItemKind::Coal => Self::Coal,
            SourceItemKind::Water => Self::Water,
            SourceItemKind::RawQuartz => Self::RawQuartz,
            SourceItemKind::Sulfur => Self::Sulfur,
            SourceItemKind::CrudeOil => Self::CrudeOil,
            SourceItemKind::CateriumOre => Self::CateriumOre,
            SourceItemKind::Bauxite => Self::Bauxite,
            SourceItemKind::Uranium => Self::Uranium,
            SourceItemKind::Sam => Self::Sam,
        }
    }
}
